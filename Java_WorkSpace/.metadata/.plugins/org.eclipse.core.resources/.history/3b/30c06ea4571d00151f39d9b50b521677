package ca.uwaterloo.lab2_202_16;

import java.util.Arrays;

import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v7.app.ActionBarActivity;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import ca.uwaterloo.sensortoy.LineGraphView;

public class MainActivity extends ActionBarActivity {
	static LineGraphView graph;
	static Button buttonClear;
	static int state = 0;
	static int step = 0;
	
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
            

        if (savedInstanceState == null) {
            getSupportFragmentManager().beginTransaction()
                    .add(R.id.container, new PlaceholderFragment())
                    .commit();
        }
    }

    public static class PlaceholderFragment extends Fragment {

        public PlaceholderFragment() {
        }

        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                Bundle savedInstanceState) {
            View rootView = inflater.inflate(R.layout.fragment_main, container, false);
            LinearLayout layout = (LinearLayout) rootView.findViewById(R.id.layout);
            graph = new LineGraphView(rootView.getContext(),
            		100,
            		Arrays.asList("x", "y", "z"));
            TextView linearAcceleration = new TextView(rootView.getContext());
            layout.addView(linearAcceleration);
            layout.addView(graph);
            graph.setVisibility(View.VISIBLE);
            
            
            SensorManager sensorManager = (SensorManager)rootView.getContext().getSystemService(SENSOR_SERVICE);
            Sensor accelSensor = sensorManager.getDefaultSensor(Sensor.TYPE_LINEAR_ACCELERATION);
            SensorEventListener a = new AccelerationSensorEventListener(linearAcceleration);
            sensorManager.registerListener(a, accelSensor, SensorManager.SENSOR_DELAY_FASTEST);
            
            buttonClear = new Button(getActivity());
            buttonClear.setText("Clear");
            
            buttonClear.setOnClickListener(new OnClickListener() {

    			@Override
    			public void onClick(View v) {
    				// TODO Auto-generated method stub
    				step=0;
    			}

            });
            
            layout.addView(buttonClear);
            return rootView;
        }
        
        class AccelerationSensorEventListener implements SensorEventListener {
        	TextView output;
        	
        	public AccelerationSensorEventListener(TextView outputView){
        		output = outputView;
        	}

			@Override
			public void onAccuracyChanged(Sensor accelSensor, int i) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void onSensorChanged(SensorEvent event) {
				if(event.sensor.getType() == Sensor.TYPE_LINEAR_ACCELERATION) {
					float x = event.values[0];
					float y = event.values[1];
					float z = event.values[2];
					
					float filteredValues [] = lowpass(event.values, 10);

					float accely = filteredValues[1];
					
					switch (state) {
						case 0:
							if(accely>5.00) {
								state = 1;
							}
							break;
						
						case 1:
							if(accely>25.00 && state == 1){
								state = 2;
							}
							break;
						
						case 2:
							if(accely<0 && state ==2)
							{
								step++;
								state=0;
							}
							break;
					}
					
					
					
					graph.addPoint(filteredValues);
					String s = String.format("STEPS: " +  step);
					output.setText(s);
					
				}
				
			}
			
			float[] lowpass(float[] in, float a) {
				float[] out = new float[in.length];
				out[0] = 0;
				for(int i = 1; i < in.length; i++) {
				out[i] = a * in[i] + (1-a) * out[i-1];
				}
				return out;
			}
			
        }
    }

}
